{"version":3,"sources":["../../client-core/src/auth.ts","../../client-core/src/bodySerializer.ts","../../client-core/src/pathSerializer.ts","../src/utils.ts","../src/client.ts"],"names":["getAuthToken","auth","callback","token","serializeFormDataPair","data","key","value","serializeUrlSearchParamsPair","formDataBodySerializer","body","v","jsonBodySerializer","urlSearchParamsBodySerializer","separatorArrayExplode","style","separatorArrayNoExplode","separatorObjectExplode","serializeArrayParam","allowReserved","explode","name","joinedValues","separator","serializePrimitiveParam","serializeObjectParam","values","PATH_PARAM_RE","defaultPathSerializer","path","_url","url","matches","match","c","replaceValue","createQuerySerializer","array","object","queryParams","search","setAuthParams","security","options","x","buildUrl","getUrl","query","querySerializer","mergeConfigs","a","b","config","mergeHeaders","axiosHeadersKeywords","headers","mergedHeaders","header","iterator","createConfig","override","createClient","_config","configWithoutAuth","instance","axios","getConfig","setConfig","request","opts","_axios","optsWithoutAuth","response","error","e"],"mappings":"oJAmBO,IAAMA,EAAe,MAC1BC,CAAAA,CACAC,IACgC,CAChC,IAAMC,CACJ,CAAA,OAAOD,GAAa,UAAa,CAAA,MAAMA,EAASD,CAAI,CAAA,CAAIC,EAE1D,GAAKC,CAAAA,CAIL,OAAIF,CAAAA,CAAK,SAAW,QACX,CAAA,CAAA,OAAA,EAAUE,CAAK,CAGpBF,CAAAA,CAAAA,CAAAA,CAAK,SAAW,OACX,CAAA,CAAA,MAAA,EAAS,KAAKE,CAAK,CAAC,GAGtBA,CACT,CAAA,CCvBMC,EAAwB,CAACC,CAAAA,CAAgBC,EAAaC,CAAmB,GAAA,CACzE,OAAOA,CAAAA,EAAU,UAAYA,CAAiB,YAAA,IAAA,CAChDF,EAAK,MAAOC,CAAAA,CAAAA,CAAKC,CAAK,CAEtBF,CAAAA,CAAAA,CAAK,MAAOC,CAAAA,CAAAA,CAAK,KAAK,SAAUC,CAAAA,CAAK,CAAC,EAE1C,CAAA,CAEMC,EAA+B,CACnCH,CAAAA,CACAC,CACAC,CAAAA,CAAAA,GACG,CACC,OAAOA,CAAAA,EAAU,SACnBF,CAAK,CAAA,MAAA,CAAOC,EAAKC,CAAK,CAAA,CAEtBF,EAAK,MAAOC,CAAAA,CAAAA,CAAK,KAAK,SAAUC,CAAAA,CAAK,CAAC,EAE1C,CAAA,CAEaE,EAAyB,CACpC,cAAA,CACEC,CACG,EAAA,CACH,IAAML,CAAO,CAAA,IAAI,SAEjB,OAAA,MAAA,CAAO,QAAQK,CAAI,CAAA,CAAE,OAAQ,CAAA,CAAC,CAACJ,CAAKC,CAAAA,CAAK,IAAM,CAClBA,CAAAA,EAAU,OAGjC,KAAM,CAAA,OAAA,CAAQA,CAAK,CAAA,CACrBA,EAAM,OAASI,CAAAA,CAAAA,EAAMP,EAAsBC,CAAMC,CAAAA,CAAAA,CAAKK,CAAC,CAAC,CAAA,CAExDP,EAAsBC,CAAMC,CAAAA,CAAAA,CAAKC,CAAK,CAE1C,EAAA,CAAC,EAEMF,CACT,CACF,EAEaO,CAAqB,CAAA,CAChC,cAAoBF,CAAAA,CAAAA,EAClB,KAAK,SAAUA,CAAAA,CAAAA,CAAM,CAACJ,CAAKC,CAAAA,CAAAA,GACzB,OAAOA,CAAU,EAAA,QAAA,CAAWA,CAAM,CAAA,QAAA,GAAaA,CACjD,CACJ,EAEaM,CAAgC,CAAA,CAC3C,eACEH,CACG,EAAA,CACH,IAAML,CAAAA,CAAO,IAAI,eAEjB,CAAA,OAAO,OAAA,OAAQK,CAAAA,CAAI,EAAE,OAAQ,CAAA,CAAC,CAACJ,CAAKC,CAAAA,CAAK,IAAM,CAClBA,CAAAA,EAAU,OAGjC,KAAM,CAAA,OAAA,CAAQA,CAAK,CACrBA,CAAAA,CAAAA,CAAM,OAASI,CAAAA,CAAAA,EAAMH,EAA6BH,CAAMC,CAAAA,CAAAA,CAAKK,CAAC,CAAC,CAAA,CAE/DH,EAA6BH,CAAMC,CAAAA,CAAAA,CAAKC,CAAK,CAAA,EAEjD,CAAC,CAEMF,CAAAA,CAAAA,CAAK,UACd,CACF,ECxDaS,CAAyBC,CAAAA,CAAAA,EAA+B,CACnE,OAAQA,GACN,KAAK,QACH,OAAO,GAAA,CACT,KAAK,QACH,CAAA,OAAO,IACT,KAAK,QAAA,CACH,OAAO,GACT,CAAA,QACE,OAAO,GACX,CACF,EAEaC,CAA2BD,CAAAA,CAAAA,EAA+B,CACrE,OAAQA,GACN,KAAK,OACH,OAAO,GAAA,CACT,KAAK,eACH,CAAA,OAAO,GACT,CAAA,KAAK,iBACH,OAAO,KAAA,CACT,QACE,OAAO,GACX,CACF,CAEaE,CAAAA,CAAAA,CAA0BF,CAAgC,EAAA,CACrE,OAAQA,CAAAA,EACN,KAAK,OACH,CAAA,OAAO,IACT,KAAK,QAAA,CACH,OAAO,GACT,CAAA,KAAK,SACH,OAAO,GAAA,CACT,QACE,OAAO,GACX,CACF,CAEaG,CAAAA,CAAAA,CAAsB,CAAC,CAClC,cAAAC,CACA,CAAA,OAAA,CAAAC,EACA,IAAAC,CAAAA,CAAAA,CACA,MAAAN,CACA,CAAA,KAAA,CAAAR,CACF,CAAA,GAEM,CACJ,GAAI,CAACa,EAAS,CACZ,IAAME,GACJH,CAAgBZ,CAAAA,CAAAA,CAAQA,CAAM,CAAA,GAAA,CAAKI,GAAM,kBAAmBA,CAAAA,CAAW,CAAC,CACxE,EAAA,IAAA,CAAKK,EAAwBD,CAAK,CAAC,EACrC,OAAQA,CAAAA,EACN,KAAK,OAAA,CACH,OAAO,CAAIO,CAAAA,EAAAA,CAAY,GACzB,KAAK,QAAA,CACH,OAAO,CAAA,CAAA,EAAID,CAAI,CAAIC,CAAAA,EAAAA,CAAY,GACjC,KAAK,QAAA,CACH,OAAOA,CACT,CAAA,QACE,OAAO,CAAA,EAAGD,CAAI,CAAIC,CAAAA,EAAAA,CAAY,EAClC,CACF,CAEA,IAAMC,CAAYT,CAAAA,CAAAA,CAAsBC,CAAK,CAAA,CACvCO,EAAef,CAClB,CAAA,GAAA,CAAKI,GACAI,CAAU,GAAA,OAAA,EAAWA,IAAU,QAC1BI,CAAAA,CAAAA,CAAgBR,EAAI,kBAAmBA,CAAAA,CAAW,EAGpDa,CAAwB,CAAA,CAC7B,cAAAL,CACA,CAAA,IAAA,CAAAE,EACA,KAAOV,CAAAA,CACT,CAAC,CACF,EACA,IAAKY,CAAAA,CAAS,EACjB,OAAOR,CAAAA,GAAU,SAAWA,CAAU,GAAA,QAAA,CAClCQ,CAAYD,CAAAA,CAAAA,CACZA,CACN,CAEaE,CAAAA,CAAAA,CAA0B,CAAC,CACtC,aAAA,CAAAL,EACA,IAAAE,CAAAA,CAAAA,CACA,KAAAd,CAAAA,CACF,IAA+B,CAC7B,GAA2BA,GAAU,IACnC,CAAA,OAAO,GAGT,GAAI,OAAOA,GAAU,QACnB,CAAA,MAAM,IAAI,KACR,CAAA,2GACF,EAGF,OAAO,CAAA,EAAGc,CAAI,CAAIF,CAAAA,EAAAA,CAAAA,CAAgBZ,CAAQ,CAAA,kBAAA,CAAmBA,CAAK,CAAC,CAAA,CACrE,EAEakB,CAAuB,CAAA,CAAC,CACnC,aAAAN,CAAAA,CAAAA,CACA,OAAAC,CAAAA,CAAAA,CACA,KAAAC,CACA,CAAA,KAAA,CAAAN,EACA,KAAAR,CAAAA,CACF,IAEM,CACJ,GAAIA,CAAiB,YAAA,IAAA,CACnB,OAAO,CAAGc,EAAAA,CAAI,IAAId,CAAM,CAAA,WAAA,EAAa,CAGvC,CAAA,CAAA,GAAIQ,IAAU,YAAgB,EAAA,CAACK,EAAS,CACtC,IAAIM,EAAmB,EAAA,CACvB,OAAO,OAAQnB,CAAAA,CAAK,CAAE,CAAA,OAAA,CAAQ,CAAC,CAACD,CAAAA,CAAKK,CAAC,CAAM,GAAA,CAC1Ce,EAAS,CACP,GAAGA,CACHpB,CAAAA,CAAAA,CACAa,EAAiBR,CAAe,CAAA,kBAAA,CAAmBA,CAAW,CAChE,EACF,CAAC,CACD,CAAA,IAAMW,CAAeI,CAAAA,CAAAA,CAAO,KAAK,GAAG,CAAA,CACpC,OAAQX,CAAAA,EACN,KAAK,MACH,CAAA,OAAO,GAAGM,CAAI,CAAA,CAAA,EAAIC,CAAY,CAChC,CAAA,CAAA,KAAK,QACH,OAAO,CAAA,CAAA,EAAIA,CAAY,CACzB,CAAA,CAAA,KAAK,QACH,CAAA,OAAO,IAAID,CAAI,CAAA,CAAA,EAAIC,CAAY,CACjC,CAAA,CAAA,QACE,OAAOA,CACX,CACF,CAEA,IAAMC,EAAYN,CAAuBF,CAAAA,CAAK,EACxCO,CAAe,CAAA,MAAA,CAAO,QAAQf,CAAK,CAAA,CACtC,GAAI,CAAA,CAAC,CAACD,CAAKK,CAAAA,CAAC,IACXa,CAAwB,CAAA,CACtB,cAAAL,CACA,CAAA,IAAA,CAAMJ,IAAU,YAAe,CAAA,CAAA,EAAGM,CAAI,CAAIf,CAAAA,EAAAA,CAAG,IAAMA,CACnD,CAAA,KAAA,CAAOK,CACT,CAAC,CACH,CACC,CAAA,IAAA,CAAKY,CAAS,CACjB,CAAA,OAAOR,IAAU,OAAWA,EAAAA,CAAAA,GAAU,SAClCQ,CAAYD,CAAAA,CAAAA,CACZA,CACN,MC7JMK,CAAgB,CAAA,aAAA,CAEhBC,EAAwB,CAAC,CAAE,KAAAC,CAAM,CAAA,GAAA,CAAKC,CAAK,CAAA,GAAsB,CACrE,IAAIC,CAAAA,CAAMD,EACJE,CAAUF,CAAAA,CAAAA,CAAK,MAAMH,CAAa,CAAA,CACxC,GAAIK,CACF,CAAA,IAAA,IAAWC,KAASD,CAAS,CAAA,CAC3B,IAAIZ,CAAU,CAAA,KAAA,CACVC,EAAOY,CAAM,CAAA,SAAA,CAAU,CAAGA,CAAAA,CAAAA,CAAM,OAAS,CAAC,CAAA,CAC1ClB,EAA6B,QAE7BM,CAAAA,CAAAA,CAAK,SAAS,GAAG,CAAA,GACnBD,CAAU,CAAA,IAAA,CACVC,EAAOA,CAAK,CAAA,SAAA,CAAU,EAAGA,CAAK,CAAA,MAAA,CAAS,CAAC,CAGtCA,CAAAA,CAAAA,CAAAA,CAAK,UAAW,CAAA,GAAG,GACrBA,CAAOA,CAAAA,CAAAA,CAAK,UAAU,CAAC,CAAA,CACvBN,EAAQ,OACCM,EAAAA,CAAAA,CAAK,WAAW,GAAG,CAAA,GAC5BA,EAAOA,CAAK,CAAA,SAAA,CAAU,CAAC,CACvBN,CAAAA,CAAAA,CAAQ,UAGV,IAAMR,CAAAA,CAAQsB,CAAKR,CAAAA,CAAI,EAEvB,GAA2Bd,CAAAA,EAAU,KACnC,SAGF,GAAI,MAAM,OAAQA,CAAAA,CAAK,CAAG,CAAA,CACxBwB,EAAMA,CAAI,CAAA,OAAA,CACRE,EACA,CAAoB,CAAA,CAAE,QAAAb,CAAS,CAAA,IAAA,CAAAC,CAAM,CAAA,KAAA,CAAAN,EAAO,KAAAR,CAAAA,CAAM,CAAC,CACrD,CAAA,CACA,QACF,CAEA,GAAI,OAAOA,CAAU,EAAA,QAAA,CAAU,CAC7BwB,CAAMA,CAAAA,CAAAA,CAAI,QACRE,CACA,CAAA,CAAA,CAAqB,CACnB,OAAAb,CAAAA,CAAAA,CACA,IAAAC,CAAAA,CAAAA,CACA,MAAAN,CACA,CAAA,KAAA,CAAOR,CACT,CAAC,CACH,EACA,QACF,CAEA,GAAIQ,CAAU,GAAA,QAAA,CAAU,CACtBgB,CAAMA,CAAAA,CAAAA,CAAI,QACRE,CACA,CAAA,CAAA,CAAA,EAAIC,EAAwB,CAC1B,IAAA,CAAAb,CACA,CAAA,KAAA,CAAOd,CACT,CAAC,CAAC,EACJ,CACA,CAAA,QACF,CAEA,IAAM4B,CAAAA,CAAe,mBACnBpB,CAAU,GAAA,OAAA,CAAU,IAAIR,CAAe,CAAA,CAAA,CAAMA,CAC/C,CACAwB,CAAAA,CAAAA,CAAMA,EAAI,OAAQE,CAAAA,CAAAA,CAAOE,CAAY,EACvC,CAEF,OAAOJ,CACT,EAEaK,CAAwB,CAAA,CAAc,CACjD,aAAAjB,CAAAA,CAAAA,CACA,KAAAkB,CAAAA,CAAAA,CACA,OAAAC,CACF,CAAA,CAA4B,EACDC,GAAAA,CAAAA,EAAmB,CAC1C,IAAIC,CAAAA,CAAmB,EAAC,CACxB,GAAID,CAAe,EAAA,OAAOA,GAAgB,QACxC,CAAA,IAAA,IAAWlB,KAAQkB,CAAa,CAAA,CAC9B,IAAMhC,CAAQgC,CAAAA,CAAAA,CAAYlB,CAAI,CAE9B,CAAA,GAA2Bd,GAAU,IAIrC,CAAA,CAAA,GAAI,MAAM,OAAQA,CAAAA,CAAK,CAAG,CAAA,CACxBiC,EAAS,CACP,GAAGA,EACH,CAAoB,CAAA,CAClB,cAAArB,CACA,CAAA,OAAA,CAAS,IACT,CAAA,IAAA,CAAAE,EACA,KAAO,CAAA,MAAA,CACP,MAAAd,CACA,CAAA,GAAG8B,CACL,CAAC,CACH,CACA,CAAA,QACF,CAEA,GAAI,OAAO9B,GAAU,QAAU,CAAA,CAC7BiC,EAAS,CACP,GAAGA,EACH,CAAqB,CAAA,CACnB,cAAArB,CACA,CAAA,OAAA,CAAS,KACT,IAAAE,CAAAA,CAAAA,CACA,MAAO,YACP,CAAA,KAAA,CAAOd,CACP,CAAA,GAAG+B,CACL,CAAC,CACH,EACA,QACF,CAEAE,EAAS,CACP,GAAGA,CACHN,CAAAA,CAAAA,CAAwB,CACtB,aAAAf,CAAAA,CAAAA,CACA,KAAAE,CACA,CAAA,KAAA,CAAOd,CACT,CAAC,CACH,EACF,CAAA,CAEF,OAAOiC,CAAO,CAAA,IAAA,CAAK,GAAG,CACxB,CAAA,CAIWC,EAAgB,MAAO,CAClC,SAAAC,CACA,CAAA,GAAGC,CACL,CAGQ,GAAA,CACN,QAAW1C,CAAQyC,IAAAA,CAAAA,CAAU,CAC3B,IAAMvC,CAAAA,CAAQ,MAAMyC,CAAAA,CAAa3C,EAAM0C,CAAQ,CAAA,IAAI,EAEnD,GAAI,CAACxC,EACH,SAGF,IAAMkB,CAAOpB,CAAAA,CAAAA,CAAK,MAAQ,eAE1B,CAAA,OAAQA,EAAK,EAAI,EACf,KAAK,OACE0C,CAAAA,CAAAA,CAAQ,KACXA,GAAAA,CAAAA,CAAQ,MAAQ,EAAC,CAAA,CAEnBA,EAAQ,KAAMtB,CAAAA,CAAI,EAAIlB,CACtB,CAAA,MACF,KAAK,QAAU,CAAA,CACb,IAAMI,CAAQ,CAAA,CAAA,EAAGc,CAAI,CAAIlB,CAAAA,EAAAA,CAAK,GAC1B,QAAYwC,GAAAA,CAAAA,CAAQ,OAAWA,EAAAA,CAAAA,CAAQ,QAAQ,MACjDA,CAAAA,CAAAA,CAAQ,QAAQ,MAAY,CAAA,CAAA,EAAGA,EAAQ,OAAQ,CAAA,MAAS,CAAKpC,EAAAA,EAAAA,CAAK,GAElEoC,CAAQ,CAAA,OAAA,CAAQ,OAAYpC,CAE9B,CAAA,KACF,CACA,KAAK,QAAA,CACL,QACEoC,CAAAA,CAAQ,QAAQtB,CAAI,CAAA,CAAIlB,EACxB,KACJ,CAEA,MACF,CACF,CAAA,CAEa0C,EAAgCF,CAC/BG,EAAAA,CAAAA,CAAO,CACjB,IAAMH,CAAAA,CAAAA,CAAQ,KAEd,KAAQA,CAAAA,CAAAA,CAAQ,iBAAmC,SAAhBA,CAAAA,CAAAA,CAAQ,KAC3C,CAAA,eAAA,CACE,OAAOA,CAAQ,CAAA,eAAA,EAAoB,WAC/BA,CAAQ,CAAA,eAAA,CACRP,EAAsBO,CAAQ,CAAA,eAAe,CACnD,CAAA,GAAA,CAAKA,EAAQ,GACf,CAAC,EAIUG,CAAS,CAAA,CAAC,CACrB,IAAAjB,CAAAA,CAAAA,CACA,KAAAkB,CAAAA,CAAAA,CACA,gBAAAC,CACA,CAAA,GAAA,CAAKlB,CACP,CAKM,GAAA,CAEJ,IAAIC,CADYD,CAAAA,CAAAA,CAAK,WAAW,GAAG,CAAA,CAAIA,EAAO,CAAIA,CAAAA,EAAAA,CAAI,GAElDD,CACFE,GAAAA,CAAAA,CAAMH,EAAsB,CAAE,IAAA,CAAAC,CAAM,CAAA,GAAA,CAAAE,CAAI,CAAC,CAAA,CAAA,CAE3C,IAAIS,CAASO,CAAAA,CAAAA,CAAQC,EAAgBD,CAAK,CAAA,CAAI,EAC9C,CAAA,OAAIP,EAAO,UAAW,CAAA,GAAG,IACvBA,CAASA,CAAAA,CAAAA,CAAO,UAAU,CAAC,CAAA,CAAA,CAEzBA,CACFT,GAAAA,CAAAA,EAAO,IAAIS,CAAM,CAAA,CAAA,CAAA,CAEZT,CACT,CAEakB,CAAAA,CAAAA,CAAe,CAACC,CAAWC,CAAAA,CAAAA,GAAsB,CAC5D,IAAMC,CAAAA,CAAS,CAAE,GAAGF,CAAAA,CAAG,GAAGC,CAAE,CAAA,CAC5B,OAAAC,CAAO,CAAA,OAAA,CAAUC,CAAaH,CAAAA,CAAAA,CAAE,QAASC,CAAE,CAAA,OAAO,EAC3CC,CACT,CAAA,CAKaE,EAAuB,CAClC,QAAA,CACA,QACA,CAAA,KAAA,CACA,OACA,OACA,CAAA,MAAA,CACA,KACF,CAEaD,CAAAA,CAAAA,CAAe,IACvBE,CACsB,GAAA,CACzB,IAAMC,CAAAA,CAAsC,EAC5C,CAAA,IAAA,IAAWC,KAAUF,CAAS,CAAA,CAC5B,GAAI,CAACE,CAAAA,EAAU,OAAOA,CAAW,EAAA,QAAA,CAC/B,SAGF,IAAMC,CAAAA,CAAW,OAAO,OAAQD,CAAAA,CAAM,EAEtC,IAAW,GAAA,CAACnD,CAAKC,CAAAA,CAAK,IAAKmD,CACzB,CAAA,GACEJ,EAAqB,QACnBhD,CAAAA,CACF,GACA,OAAOC,CAAAA,EAAU,QAEjBiD,CAAAA,CAAAA,CAAclD,CAAG,CAAI,CAAA,CACnB,GAAIkD,CAAclD,CAAAA,CAAG,EACrB,GAAGC,CACL,CACSA,CAAAA,KAAAA,GAAAA,CAAAA,GAAU,KACnB,OAAOiD,CAAAA,CAAclD,CAAG,CACf,CAAA,KAAA,GAAA,KAAA,CAAM,QAAQC,CAAK,CAAA,CAC5B,QAAWI,CAAKJ,IAAAA,CAAAA,CAEdiD,EAAclD,CAAG,CAAA,CAAI,CAAC,GAAIkD,CAAAA,CAAclD,CAAG,CAAK,EAAA,EAAKK,CAAAA,CAAW,OAEzDJ,CAAU,GAAA,SAAA,GAGnBiD,EAAclD,CAAG,CAAA,CACf,OAAOC,CAAU,EAAA,QAAA,CAAW,IAAK,CAAA,SAAA,CAAUA,CAAK,CAAKA,CAAAA,CAAAA,EAG7D,CACA,OAAOiD,CACT,EAEaG,CAAe,CAAA,CAC1BC,CAAqD,CAAA,MACP,CAC9C,GAAGA,CACL,CC3RO,EAAA,IAAMC,EAAe,CAACT,CAAAA,CAAiB,EAAe,GAAA,CAC3D,IAAIU,CAAUb,CAAAA,CAAAA,CAAaU,GAAgBP,CAAAA,CAAM,EAG3C,CAAE,IAAA,CAAAnD,CAAM,CAAA,GAAG8D,CAAkB,CAAID,CAAAA,CAAAA,CACjCE,EAAWC,kBAAM,CAAA,MAAA,CAAOF,CAAiB,CAEzCG,CAAAA,CAAAA,CAAY,KAAe,CAAE,GAAGJ,CAAQ,CAAA,CAAA,CAExCK,EAAaf,CACjBU,GAAAA,CAAAA,CAAUb,EAAaa,CAASV,CAAAA,CAAM,CACtCY,CAAAA,CAAAA,CAAS,SAAW,CAClB,GAAGA,EAAS,QACZ,CAAA,GAAGF,EAEH,OAAST,CAAAA,CAAAA,CAAaW,EAAS,QAAS,CAAA,OAAA,CAASF,EAAQ,OAAO,CAClE,EACOI,CAAU,EAAA,CAAA,CAIbE,EAA6B,MAAOzB,CAAAA,EAAY,CACpD,IAAM0B,EAAO,CACX,GAAGP,EACH,GAAGnB,CAAAA,CACH,MAAOA,CAAQ,CAAA,KAAA,EAASmB,CAAQ,CAAA,KAAA,EAASE,EACzC,OAASX,CAAAA,CAAAA,CAAaS,EAAQ,OAASnB,CAAAA,CAAAA,CAAQ,OAAO,CACxD,CAAA,CAEI0B,CAAK,CAAA,QAAA,EACP,MAAM5B,CAAc,CAAA,CAClB,GAAG4B,CACH,CAAA,QAAA,CAAUA,EAAK,QACjB,CAAC,EAGCA,CAAK,CAAA,IAAA,EAAQA,EAAK,cACpBA,GAAAA,CAAAA,CAAK,KAAOA,CAAK,CAAA,cAAA,CAAeA,EAAK,IAAI,CAAA,CAAA,CAG3C,IAAMtC,CAAAA,CAAMc,EAASwB,CAAI,CAAA,CAEzB,GAAI,CAEF,IAAMC,EAASD,CAAK,CAAA,KAAA,CAEd,CAAE,IAAA,CAAApE,EAAM,GAAGsE,CAAgB,EAAIF,CAC/BG,CAAAA,CAAAA,CAAW,MAAMF,CAAO,CAAA,CAC5B,GAAGC,CAAAA,CACH,QAASF,CAAK,CAAA,OAAA,CACd,KAAMA,CAAK,CAAA,IAAA,CACX,QAASA,CAAK,CAAA,OAAA,CAEd,OAAQA,CAAK,CAAA,gBAAA,CAAmBA,EAAK,KAAQ,CAAA,KAAA,CAAA,CAC7C,IAAAtC,CACF,CAAC,EAEG,CAAE,IAAA,CAAA1B,CAAK,CAAA,CAAImE,EAEf,OAAIH,CAAAA,CAAK,eAAiB,MACpBA,GAAAA,CAAAA,CAAK,mBACP,MAAMA,CAAAA,CAAK,iBAAkBhE,CAAAA,CAAI,EAG/BgE,CAAK,CAAA,mBAAA,GACPhE,EAAO,MAAMgE,CAAAA,CAAK,oBAAoBhE,CAAI,CAAA,CAAA,CAAA,CAIvC,CACL,GAAGmE,EACH,IAAMnE,CAAAA,CAAAA,EAAQ,EAChB,CACF,OAASoE,CAAO,CAAA,CACd,IAAMC,CAAID,CAAAA,CAAAA,CACV,GAAIJ,CAAK,CAAA,YAAA,CACP,MAAMK,CAGR,CAAA,OAAAA,EAAE,KAAQA,CAAAA,CAAAA,CAAE,QAAU,EAAA,IAAA,EAAQ,EACvBA,CAAAA,CACT,CACF,CAEA,CAAA,OAAO,CACL,QAAA7B,CAAAA,CAAAA,CACA,MAASF,CAAAA,CAAAA,EAAYyB,EAAQ,CAAE,GAAGzB,EAAS,MAAQ,CAAA,QAAS,CAAC,CAC7D,CAAA,GAAA,CAAMA,CAAYyB,EAAAA,CAAAA,CAAQ,CAAE,GAAGzB,CAAAA,CAAS,OAAQ,KAAM,CAAC,EACvD,SAAAuB,CAAAA,CAAAA,CACA,KAAOvB,CAAYyB,EAAAA,CAAAA,CAAQ,CAAE,GAAGzB,CAAAA,CAAS,OAAQ,MAAO,CAAC,EACzD,QAAAqB,CAAAA,CAAAA,CACA,OAAUrB,CAAAA,CAAAA,EAAYyB,EAAQ,CAAE,GAAGzB,EAAS,MAAQ,CAAA,SAAU,CAAC,CAC/D,CAAA,KAAA,CAAQA,GAAYyB,CAAQ,CAAA,CAAE,GAAGzB,CAAS,CAAA,MAAA,CAAQ,OAAQ,CAAC,CAAA,CAC3D,KAAOA,CAAYyB,EAAAA,CAAAA,CAAQ,CAAE,GAAGzB,EAAS,MAAQ,CAAA,MAAO,CAAC,CACzD,CAAA,GAAA,CAAMA,GAAYyB,CAAQ,CAAA,CAAE,GAAGzB,CAAS,CAAA,MAAA,CAAQ,KAAM,CAAC,CAAA,CACvD,QAAAyB,CACA,CAAA,SAAA,CAAAD,CACF,CACF","file":"index.cjs","sourcesContent":["export type AuthToken = string | undefined;\n\nexport interface Auth {\n  /**\n   * Which part of the request do we use to send the auth?\n   *\n   * @default 'header'\n   */\n  in?: 'header' | 'query' | 'cookie';\n  /**\n   * Header or query parameter name.\n   *\n   * @default 'Authorization'\n   */\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n  auth: Auth,\n  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,\n): Promise<string | undefined> => {\n  const token =\n    typeof callback === 'function' ? await callback(auth) : callback;\n\n  if (!token) {\n    return;\n  }\n\n  if (auth.scheme === 'bearer') {\n    return `Bearer ${token}`;\n  }\n\n  if (auth.scheme === 'basic') {\n    return `Basic ${btoa(token)}`;\n  }\n\n  return token;\n};\n","import type {\n  ArrayStyle,\n  ObjectStyle,\n  SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record<string, unknown>) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n  allowReserved?: boolean;\n  array?: SerializerOptions<ArrayStyle>;\n  object?: SerializerOptions<ObjectStyle>;\n}\n\nconst serializeFormDataPair = (data: FormData, key: string, value: unknown) => {\n  if (typeof value === 'string' || value instanceof Blob) {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nconst serializeUrlSearchParamsPair = (\n  data: URLSearchParams,\n  key: string,\n  value: unknown,\n) => {\n  if (typeof value === 'string') {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const formDataBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeFormDataPair(data, key, v));\n      } else {\n        serializeFormDataPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nexport const jsonBodySerializer = {\n  bodySerializer: <T>(body: T) =>\n    JSON.stringify(body, (key, value) =>\n      typeof value === 'bigint' ? value.toString() : value,\n    ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new URLSearchParams();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\n      } else {\n        serializeUrlSearchParamsPair(data, key, value);\n      }\n    });\n\n    return data.toString();\n  },\n};\n","interface SerializeOptions<T>\n  extends SerializePrimitiveOptions,\n    SerializerOptions<T> {}\n\ninterface SerializePrimitiveOptions {\n  allowReserved?: boolean;\n  name: string;\n}\n\nexport interface SerializerOptions<T> {\n  /**\n   * @default true\n   */\n  explode: boolean;\n  style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n  value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'form':\n      return ',';\n    case 'pipeDelimited':\n      return '|';\n    case 'spaceDelimited':\n      return '%20';\n    default:\n      return ',';\n  }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const serializeArrayParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ArraySeparatorStyle> & {\n  value: unknown[];\n}) => {\n  if (!explode) {\n    const joinedValues = (\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\n    ).join(separatorArrayNoExplode(style));\n    switch (style) {\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      case 'simple':\n        return joinedValues;\n      default:\n        return `${name}=${joinedValues}`;\n    }\n  }\n\n  const separator = separatorArrayExplode(style);\n  const joinedValues = value\n    .map((v) => {\n      if (style === 'label' || style === 'simple') {\n        return allowReserved ? v : encodeURIComponent(v as string);\n      }\n\n      return serializePrimitiveParam({\n        allowReserved,\n        name,\n        value: v as string,\n      });\n    })\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n  allowReserved,\n  name,\n  value,\n}: SerializePrimitiveParam) => {\n  if (value === undefined || value === null) {\n    return '';\n  }\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n    );\n  }\n\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ObjectSeparatorStyle> & {\n  value: Record<string, unknown> | Date;\n}) => {\n  if (value instanceof Date) {\n    return `${name}=${value.toISOString()}`;\n  }\n\n  if (style !== 'deepObject' && !explode) {\n    let values: string[] = [];\n    Object.entries(value).forEach(([key, v]) => {\n      values = [\n        ...values,\n        key,\n        allowReserved ? (v as string) : encodeURIComponent(v as string),\n      ];\n    });\n    const joinedValues = values.join(',');\n    switch (style) {\n      case 'form':\n        return `${name}=${joinedValues}`;\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      default:\n        return joinedValues;\n    }\n  }\n\n  const separator = separatorObjectExplode(style);\n  const joinedValues = Object.entries(value)\n    .map(([key, v]) =>\n      serializePrimitiveParam({\n        allowReserved,\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\n        value: v as string,\n      }),\n    )\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n","import type {\n  ArraySeparatorStyle,\n  QuerySerializer,\n  QuerySerializerOptions,\n} from '@hey-api/client-core';\nimport {\n  getAuthToken,\n  serializeArrayParam,\n  serializeObjectParam,\n  serializePrimitiveParam,\n} from '@hey-api/client-core';\n\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(\n          match,\n          serializeArrayParam({ explode, name, style, value }),\n        );\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const createQuerySerializer = <T = unknown>({\n  allowReserved,\n  array,\n  object,\n}: QuerySerializerOptions = {}) => {\n  const querySerializer = (queryParams: T) => {\n    let search: string[] = [];\n    if (queryParams && typeof queryParams === 'object') {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n\n        if (value === undefined || value === null) {\n          continue;\n        }\n\n        if (Array.isArray(value)) {\n          search = [\n            ...search,\n            serializeArrayParam({\n              allowReserved,\n              explode: true,\n              name,\n              style: 'form',\n              value,\n              ...array,\n            }),\n          ];\n          continue;\n        }\n\n        if (typeof value === 'object') {\n          search = [\n            ...search,\n            serializeObjectParam({\n              allowReserved,\n              explode: true,\n              name,\n              style: 'deepObject',\n              value: value as Record<string, unknown>,\n              ...object,\n            }),\n          ];\n          continue;\n        }\n\n        search = [\n          ...search,\n          serializePrimitiveParam({\n            allowReserved,\n            name,\n            value: value as string,\n          }),\n        ];\n      }\n    }\n    return search.join('&');\n  };\n  return querySerializer;\n};\n\nexport const setAuthParams = async ({\n  security,\n  ...options\n}: Pick<Required<RequestOptions>, 'security'> &\n  Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Record<any, unknown>;\n  }) => {\n  for (const auth of security) {\n    const token = await getAuthToken(auth, options.auth);\n\n    if (!token) {\n      continue;\n    }\n\n    const name = auth.name ?? 'Authorization';\n\n    switch (auth.in) {\n      case 'query':\n        if (!options.query) {\n          options.query = {};\n        }\n        options.query[name] = token;\n        break;\n      case 'cookie': {\n        const value = `${name}=${token}`;\n        if ('Cookie' in options.headers && options.headers['Cookie']) {\n          options.headers['Cookie'] = `${options.headers['Cookie']}; ${value}`;\n        } else {\n          options.headers['Cookie'] = value;\n        }\n        break;\n      }\n      case 'header':\n      default:\n        options.headers[name] = token;\n        break;\n    }\n\n    return;\n  }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n  const url = getUrl({\n    path: options.path,\n    // let `paramsSerializer()` handle query params if it exists\n    query: !options.paramsSerializer ? options.query : undefined,\n    querySerializer:\n      typeof options.querySerializer === 'function'\n        ? options.querySerializer\n        : createQuerySerializer(options.querySerializer),\n    url: options.url,\n  });\n  return url;\n};\n\nexport const getUrl = ({\n  path,\n  query,\n  querySerializer,\n  url: _url,\n}: {\n  path?: Record<string, unknown>;\n  query?: Record<string, unknown>;\n  querySerializer: QuerySerializer;\n  url: string;\n}) => {\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n  let url = pathUrl;\n  if (path) {\n    url = defaultPathSerializer({ path, url });\n  }\n  let search = query ? querySerializer(query) : '';\n  if (search.startsWith('?')) {\n    search = search.substring(1);\n  }\n  if (search) {\n    url += `?${search}`;\n  }\n  return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\n/**\n * Special Axios headers keywords allowing to set headers by request method.\n */\nexport const axiosHeadersKeywords = [\n  'common',\n  'delete',\n  'get',\n  'head',\n  'patch',\n  'post',\n  'put',\n] as const;\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Record<any, unknown> => {\n  const mergedHeaders: Record<any, unknown> = {};\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator = Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (\n        axiosHeadersKeywords.includes(\n          key as (typeof axiosHeadersKeywords)[number],\n        ) &&\n        typeof value === 'object'\n      ) {\n        mergedHeaders[key] = {\n          ...(mergedHeaders[key] as Record<any, unknown>),\n          ...value,\n        };\n      } else if (value === null) {\n        delete mergedHeaders[key];\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          // @ts-expect-error\n          mergedHeaders[key] = [...(mergedHeaders[key] ?? []), v as string];\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders[key] =\n          typeof value === 'object' ? JSON.stringify(value) : (value as string);\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\nexport const createConfig = <T extends ClientOptions = ClientOptions>(\n  override: Config<Omit<ClientOptions, keyof T> & T> = {},\n): Config<Omit<ClientOptions, keyof T> & T> => ({\n  ...override,\n});\n","import type { AxiosError, RawAxiosRequestHeaders } from 'axios';\nimport axios from 'axios';\n\nimport type { Client, Config } from './types';\nimport {\n  buildUrl,\n  createConfig,\n  mergeConfigs,\n  mergeHeaders,\n  setAuthParams,\n} from './utils';\n\nexport const createClient = (config: Config = {}): Client => {\n  let _config = mergeConfigs(createConfig(), config);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { auth, ...configWithoutAuth } = _config;\n  const instance = axios.create(configWithoutAuth);\n\n  const getConfig = (): Config => ({ ..._config });\n\n  const setConfig = (config: Config): Config => {\n    _config = mergeConfigs(_config, config);\n    instance.defaults = {\n      ...instance.defaults,\n      ..._config,\n      // @ts-expect-error\n      headers: mergeHeaders(instance.defaults.headers, _config.headers),\n    };\n    return getConfig();\n  };\n\n  // @ts-expect-error\n  const request: Client['request'] = async (options) => {\n    const opts = {\n      ..._config,\n      ...options,\n      axios: options.axios ?? _config.axios ?? instance,\n      headers: mergeHeaders(_config.headers, options.headers),\n    };\n\n    if (opts.security) {\n      await setAuthParams({\n        ...opts,\n        security: opts.security,\n      });\n    }\n\n    if (opts.body && opts.bodySerializer) {\n      opts.body = opts.bodySerializer(opts.body);\n    }\n\n    const url = buildUrl(opts);\n\n    try {\n      // assign Axios here for consistency with fetch\n      const _axios = opts.axios!;\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { auth, ...optsWithoutAuth } = opts;\n      const response = await _axios({\n        ...optsWithoutAuth,\n        baseURL: opts.baseURL as string,\n        data: opts.body,\n        headers: opts.headers as RawAxiosRequestHeaders,\n        // let `paramsSerializer()` handle query params if it exists\n        params: opts.paramsSerializer ? opts.query : undefined,\n        url,\n      });\n\n      let { data } = response;\n\n      if (opts.responseType === 'json') {\n        if (opts.responseValidator) {\n          await opts.responseValidator(data);\n        }\n\n        if (opts.responseTransformer) {\n          data = await opts.responseTransformer(data);\n        }\n      }\n\n      return {\n        ...response,\n        data: data ?? {},\n      };\n    } catch (error) {\n      const e = error as AxiosError;\n      if (opts.throwOnError) {\n        throw e;\n      }\n      // @ts-expect-error\n      e.error = e.response?.data ?? {};\n      return e;\n    }\n  };\n\n  return {\n    buildUrl,\n    delete: (options) => request({ ...options, method: 'DELETE' }),\n    get: (options) => request({ ...options, method: 'GET' }),\n    getConfig,\n    head: (options) => request({ ...options, method: 'HEAD' }),\n    instance,\n    options: (options) => request({ ...options, method: 'OPTIONS' }),\n    patch: (options) => request({ ...options, method: 'PATCH' }),\n    post: (options) => request({ ...options, method: 'POST' }),\n    put: (options) => request({ ...options, method: 'PUT' }),\n    request,\n    setConfig,\n  } as Client;\n};\n"]}